name: Python test and build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          pip install pytest pytest-cov
          pytest api_tests.py --junitxml=junit/test-results.xml

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit/test-results.xml

  sonarqube:
    name: SonarQube analysis
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

      - name: Upload SonarQube report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonarqube-report.json

  dast:
    name: DAST build, deploy and scan
    needs: [test, sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push DAST image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Wait for Azure Container App provisioning to complete
        run: |
          echo "Waiting for container app 'devops-test-app' to be ready..."
          for i in {1..10}; do
            status=$(az containerapp show -n devops-test-app -g devsecops-lab --query "properties.provisioningState" -o tsv)
            echo "Current provisioning status: $status"
            if [[ "$status" == "Succeeded" ]]; then
              echo "App is ready!"
              break
            fi
            echo "Waiting... ($i/10)"
            sleep 15
          done

      - name: Deploy DAST Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:dast-test
          containerAppName: devops-test-app
          containerAppEnvironment: devops-app-env
          resourceGroup: devsecops-lab
          location: australiaeast
          targetPort: 5000

      - name: Get deployed DAST app URL
        run: |
          FQDN=$(az containerapp show -n devops-test-app -g devsecops-lab --query properties.configuration.ingress.fqdn -o tsv)
          echo "TEST_APP_URL=https://$FQDN" >> $GITHUB_ENV
          echo "TEST_APP_URL=https://$FQDN"
          curl https://$FQDN/ui
          sed -i "s,http://localhost:5000,https://$FQDN,g" $GITHUB_WORKSPACE/openapi_specs/openapi3.yml
      - name: Commit and push updated OpenAPI spec
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git pull origin ${{ github.ref_name }}
          git add openapi_specs/openapi3.yml
          git commit -m "Update OpenAPI spec with deployed URL [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}

      - name: Wait for app to be reachable
        run: |
         echo "Waiting for app to respond at $TEST_APP_URL..."
         for i in {1..10}; do
              curl --silent --head --fail https://${{ env.TEST_APP_URL }}/ui && break
              echo "Retry $i: app not yet reachable."
              sleep 10
            done
        
      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.6.0
        with:
            token: ${{ secrets.GITHUB_TOKEN }}
            docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
            target: "https://${{ env.TEST_APP_URL }}"
            rules_file_name: .zap/rules.tsv
            cmd_options: >
              -a
              -J report_json.json
              -w report_md
              -r report_html
              -t openapi_specs/openapi3.yml
            fail_action: false

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: |
            report_json.json
            report_md.json
            report_html.json
