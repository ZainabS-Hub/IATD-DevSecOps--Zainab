name: Python test and build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Pytest
        run: |
          pip install pytest pytest-cov
          pytest api_tests.py --junitxml=junit/test-results.xml

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit/test-results.xml

  sonarqube:
    name: SonarQube analysis
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ env.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}

      - name: Download SonarQube report
        run: |
          URL="${{ env.SONAR_HOST_URL }}/api/qualitygates/project_status?p=1&projectKey=devsecops-app&branch=main"
          echo "Report URL $URL"
          curl -u ${{ env.SONAR_TOKEN }}: "$URL" -o sonarqube-report.json

      - name: Upload SonarQube report
        uses: actions/upload-artifact@v4
        with:
          name: sonarqube-report
          path: sonarqube-report.json

  dast:
    name: DAST build, deploy and scan
    needs: [test, sonarqube]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push DAST image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/devops-labs:dast-test

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Wait for Azure Container App provisioning to complete
        run: |
          for i in {1..10}; do
            status=$(az containerapp show -n devops-test-app -g devsecops-lab --query "properties.provisioningState" -o tsv)
            echo "Status: $status"
            if [[ "$status" == "Succeeded" ]]; then break; fi
            sleep 15
          done

      - name: Deploy DAST Container App
        uses: azure/container-apps-deploy-action@v1
        with:
          imageToDeploy: ${{ env.DOCKERHUB_USERNAME }}/devops-labs:dast-test
          containerAppName: devops-test-app
          containerAppEnvironment: devops-app-env
          resourceGroup: devsecops-lab
          location: australiaeast
          targetPort: 5000
        continue-on-error: true

      - name: Retry deploy if failed
        if: failure()
        run: |
          sleep 20
          az containerapp update \
            --name devops-test-app \
            --resource-group devsecops-lab \
            --image ${{ env.DOCKERHUB_USERNAME }}/devops-labs:dast-test \
            --target-port 5000

      - name: Get deployed DAST app URL
        run: |
          FQDN=$(az containerapp show -n devops-test-app -g devsecops-lab --query properties.configuration.ingress.fqdn -o tsv)
          echo "TEST_APP_URL=https://$FQDN" >> $GITHUB_ENV
          sed -i "s,http://localhost:5000,https://$FQDN,g" openapi_specs/openapi3.yml

      - name: Commit and push updated OpenAPI spec
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git pull origin ${{ github.ref_name }}
          git add openapi_specs/openapi3.yml
          git commit -m "Update OpenAPI spec with deployed URL [skip ci]" || echo "No changes to commit"
          git push origin HEAD:${{ github.ref_name }}

      - name: Wait for app to be reachable
        run: |
          for i in {1..10}; do
            curl --silent --head --fail $TEST_APP_URL/ui && break
            echo "Waiting..."
            sleep 10
          done

      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.9.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          format: openapi
          target: /zap/wrk/openapi_specs/openapi3.yml
          rules_file_name: .zap/rules.tsv
          cmd_options: '-a -c /zap/wrk/.zap/rules.tsv'
          fail_action: false
          allow_issue_writing: false
          artifact_name: 'zap-report'
    
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: report_json.json
      - name: ZAP Scan
        uses: zaproxy/action-api-scan@v0.9.0
        with:
          name: zap-report
          path: report_json.json
        

  build:
    name: Build and Sign Docker Image
    needs: test
    permissions:
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push image with SBOM & provenance
        uses: docker/build-push-action@v5
        with:
          push: true
          sbom: true
          provenance: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.4.0

      - name: Sign the image
        env:
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest
        run: cosign sign --yes $IMAGE

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Extract SBOM
        run: |
          docker buildx imagetools inspect ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs:latest \
            --format "{{json .SBOM.SPDX}}" > sbom.json
          cat sbom.json | jq . > sbom_pretty.json

      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom_pretty.json

  image-scan:
    name: Scan Docker Image
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Scan image
        uses: anchore/scan-action@v3
        id: image-scan
        with:
          image: ${{ env.DOCKERHUB_USERNAME }}/devops-labs:latest
          fail-build: false
          output-format: json

      - name: Upload Image report
        uses: actions/upload-artifact@v4
        with:
          name: image-report
          path: ${{ steps.image-scan.outputs.json }}

  submit-reports:
    name: Submit Reports to Verification Portal
    needs: [test, sonarqube, dast, image-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Generate Azure Access Token
        id: token-gen
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            ACCESS_TOKEN=$(az account get-access-token | jq -r .accessToken)
            echo "azureAccessToken=$ACCESS_TOKEN" >> "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom
          path: ./sbom

      - name: Upload reports
        env:
          AZURE_ACCESS_TOKEN: ${{ steps.token-gen.outputs.azureAccessToken }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/devops-labs
        run: |
          WEEK1_CONTAINER=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" -d "$DOCKERHUB_USERNAME/devops-labs" https://devsecops-ver.azurewebsites.net/api/week1-container)
          echo "Week1 container upload: $WEEK1_CONTAINER"

          SONAR_RESPONSE=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" --data-binary @artifacts/sonarqube-report/sonarqube-report.json https://devsecops-ver.azurewebsites.net/api/week3-sonar-report)
          echo "Sonar upload: $SONAR_RESPONSE"

          ZAP_RESPONSE=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" --data-binary @artifacts/zap-report/report_json.json https://devsecops-ver.azurewebsites.net/api/week3-zap-report)
          echo "Zap upload: $ZAP_RESPONSE"

          IMAGE_RESPONSE=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" --data-binary @artifacts/image-report/results.json https://devsecops-ver.azurewebsites.net/api/week4-image-report)
          echo "Image report upload: $IMAGE_RESPONSE"

          WEEK5_RESPONSE=$(curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" -d "$IMAGE" https://devsecops-ver.azurewebsites.net/api/week5-report)
          echo "Week5 report upload: $WEEK5_RESPONSE"
          
          curl -X POST -H "Authorization: Bearer $AZURE_ACCESS_TOKEN" --data-binary @sbom/sbom_pretty.json https://devsecops-ver.azurewebsites.net/api/week5-sbom

